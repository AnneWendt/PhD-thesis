### This script takes the speech wav files and creates NeuCube-compatible spike matrices

import cochlea
import matplotlib.pyplot as plt
import numpy as np
import thorns as th
import thorns.waves as wv
from scipy.io import wavfile
import sys

#shut up Cython
import warnings
warnings.filterwarnings("ignore", message="numpy.dtype size changed")
warnings.filterwarnings("ignore", message="numpy.ufunc size changed")


def scale_down(spike_matrix, left_cf, right_cf, left_target_cf, right_target_cf, scaling_factor):
    #scale down the data (optional; this is my way for convolution)
    
    # we scale down vertically (time) and horizontally (frequencies) using the target frequencies from MATLAB as cut-off values
    number_of_short_samples = int(len(spike_matrix)/scaling_factor)
    short_spike_matrix  = np.zeros((number_of_short_samples,len(left_target_cf)+len(right_target_cf)-2),dtype=int)
    left_threshold = 2*np.mean(spike_matrix[:,:num_freq]) #this just seems to be a good value...
    right_threshold = 2*np.mean(spike_matrix[:,num_freq:])
    
    # find cut-off indices in the spike matrix based on frequency values of target cf
    left_freq_indices = np.zeros(len(left_target_cf),dtype=int)
    right_freq_indices = np.zeros(len(right_target_cf),dtype=int)
    for idx, freq in enumerate(left_target_cf):
        left_freq_indices[idx] = np.where(left_cf >= freq)[0][0]
    for idx, freq in enumerate(right_target_cf):
        right_freq_indices[idx] = np.where(right_cf >= freq)[0][0]
        
    # now use these indices to compress the data
    for short_sam_num in xrange(number_of_short_samples):
        start_time = short_sam_num*scaling_factor
        stop_time = start_time + scaling_factor
        for freq in xrange(len(left_target_cf)-1):
            start_freq = left_freq_indices[freq]
            stop_freq = left_freq_indices[freq+1]
            if np.mean(spike_matrix[start_time:stop_time,start_freq:stop_freq]) > left_threshold:
                short_spike_matrix[short_sam_num,freq] = 1
        for freq in xrange(len(right_target_cf)-1):
            start_freq = right_freq_indices[freq]
            stop_freq = right_freq_indices[freq+1]
            if np.mean(spike_matrix[start_time:stop_time,start_freq:stop_freq]) > right_threshold:
                short_spike_matrix[short_sam_num,freq+len(left_target_cf)-1] = 1

    return short_spike_matrix

### set model parameters ###

print "Starting program..."

source_folder = 'C:/Users/Anne/Documents/Studium/PhD/projects/NZSL/speech/upsampled/'
target_folder = 'C:/Users/Anne/Documents/Studium/PhD/projects/NZSL/speech/encoded_samples/'

speakers = ['google']  #Jackson is mono, Nicolas is stereo, Theo is ??
sound_frequency = 100e3  #the sound file frequency should be 100kHz for cochlea

scaling_factor = 100  #the spike rate is quite low and the files are quite large so we will sum every 100 time points together
#scaling_threshold = 0.01  #threshold to count as full spike when scaling down. So for example, 0.2 means that 20% of the sample need to be spikes so that this is counted as spike for the short sample.

min_freq = 125  #lowest in cochlea.py
max_freq = 8001  #highest in human hearing would be 20000 but we will only work with 8000 because that's what we have Langers data for
num_freq = 3500  #based on Wright et al. 1987
cf = (min_freq,max_freq,num_freq)
#left_cf, right_cf = cf, cf

anf_num = (5,2,1)  #number of auditory nerve fibers with high/medium/low spontaneous spike rate - this is per CF! based on Liberman 1978 and 30,000 Type I fibres for 3,500 CFs (Spoendlin & Schrott 1989)
species = 'human'  #could also be cat or something but that's not what we need
seed = 0  #this is a random seed parameter and I don't know what it does

#this is to keep track of the NeuCube sample id...
sample_id = 0

### this is the big loop that does everything - per speaker, per word, per recording ###
words = ['bird', 'down', 'stop', 'tree', 'up']
for speaker in speakers:
    print "Reading", speaker, "..."

    #we have five classes
    for word in words:
        sys.stdout.write(word + '...')
        
        #every speaker recorded every word 50 times
        for speaker_sample in xrange(50):
            sys.stdout.write(str(speaker_sample+1) + '...')

            ### load data and make sure it's in the right format ###

            fs, sound = wavfile.read(source_folder + word + '_' + str(speaker_sample+1) + '.wav')
            assert fs == sound_frequency, "Frequency should be 100 kHz for cochlea module"
            assert sound.dtype == 'int16', "Data type should be int16"
            assert sound.ndim == 1 or sound.ndim == 2, "Sound file must have one or two channels"

            #normalise data (required for cochlea.py)
            sound = (sound/2.**15)

            #if we only have one channel, duplicate to make it stereo, otherwise extract channels
            if sound.ndim == 1:
                left = sound
                right = left
            else:
                left  = sound[:,0]
                right = sound[:,1]

            ### create spike trains ###
            
            #output is a pandas DataFrame with headings ['cf', 'duration', 'spikes', 'type']
            #'cf' is the exact frequency
            #'duration' is the length of the sound sample
            #'spikes' is an array of the exact spike times for that particular frequency
            #'type' is hsr, msr, or lsr depending on the settings in anf_num
            left_trains = cochlea.run_zilany2014(
                sound=left,
                fs=sound_frequency,
                anf_num=anf_num,
                cf=cf,
                species=species,
                seed=seed
            )
            right_trains = cochlea.run_zilany2014(
                sound=right,
                fs=sound_frequency,
                anf_num=anf_num,
                cf=cf,
                species=species,
                seed=seed
            )

            # put the signals from the different ANFs together so we don't have so much data
            left_trains  = th.accumulate(left_trains, ignore=['type'])
            right_trains = th.accumulate(right_trains, ignore=['type'])
##            th.plot_raster(left_trains)
##            plt.show()

            #the spikes are saved as time points, e.g., [0.123, 0.345, 0.567]
            #the values are between 0 and the sample length
            #I think they *should* have the same precision as our frequency, i.e., with 100kHz they would be 0.xxxxx (but they generally don't, and I don't know why)
            left_spikes  = left_trains['spikes']*sound_frequency
            right_spikes = right_trains['spikes']*sound_frequency

            #create a matrix of zeros and replace all spike times with 1
            #dimension is the length of the sample and 2x columns (channels for left plus channels for right)
            #since all sound files have different length, we need to set the array size dynamically
            sample_length = len(left)
            spike_matrix = np.zeros((sample_length,num_freq*2),dtype=int)
            #spike_matrix = np.zeros((sample_length,len(left_cf)+len(right_cf)),dtype=int)
            
            #we need to unpack the spike trains by frequencies
            for col_id in xrange(num_freq):
            #for col_id in xrange(len(left_cf)):
                #this converts the spike times of this channel into integers that we can use as index for the spike matrix
                #this used to be the rint function but there was a boundary error so now we round down...
                row_ids = (np.fix(left_spikes[col_id])).astype(int)
                spike_matrix[row_ids,col_id] = 1

            for col_id in xrange(num_freq):
            #for col_id in xrange(len(right_cf)):
                #and now for the right side as well - remember the offset to change the second half of the channels!
                row_ids = (np.fix(right_spikes[col_id])).astype(int)
                spike_matrix[row_ids,col_id+num_freq] = 1
                #spike_matrix[row_ids,col_id+len(left_cf)] = 1

##            #scale down the data vertically (optional; only if files are too large and spike rate is too low)
##            number_of_short_samples = int(sample_length/scaling_factor)
##            short_spike_matrix  = np.zeros((number_of_short_samples,len(left_cf)+len(right_cf)),dtype=int)
##            for short_sam_num in xrange(number_of_short_samples):
##                short_start = short_sam_num*scaling_factor
##                short_stop = short_start + scaling_factor
##                spike_row = np.count_nonzero(spike_matrix[short_start:short_stop,:],axis=0)  #this will count the ones for each column (axis=0) and give us a row of integers of how many spikes there are
##                spike_row = np.where(spike_row > (scaling_factor*scaling_threshold), 1, 0)  #we only want to count it as a spike if it is above a certain threshold
##                short_spike_matrix[short_sam_num,:] = spike_row
##            spike_matrix = short_spike_matrix

            sample_id +=1
            # get actual values that were calculated for cf
            left_cf = np.array(left_trains['cf'])
            right_cf = np.array(right_trains['cf'])

            #scale down the data to different sizes and save it
            
            # #MNI times 2
            # left_target_cf = np.array([166,240,346,355,368,374,390,397,400,402,409,417,421,423,425,428,431,434,439,442,444,448,451,455,457,459,463,464,468,470,471,475,479,483,486,489,491,493,495,497,498,499,501,501,503,504,505,505,507,508,509,510,511,512,513,514,516,516,517,518,518,519,520,520,521,521,522,523,523,524,525,526,526,527,528,529,530,531,531,532,532,533,534,534,535,536,537,538,538,539,540,540,541,541,542,543,543,544,544,545,546,546,547,547,548,549,550,550,551,551,552,552,553,553,554,554,555,557,557,558,559,560,560,561,561,562,562,563,563,564,564,565,566,566,566,567,567,568,569,569,570,570,570,571,572,572,573,573,573,574,574,575,575,576,576,577,577,577,578,578,578,579,579,580,580,581,581,582,582,582,582,582,583,583,583,583,584,584,585,585,585,586,586,586,587,587,587,588,588,588,589,589,589,590,590,591,591,591,591,592,592,593,593,593,593,594,594,594,595,595,596,596,597,597,597,597,598,598,598,598,599,599,599,600,600,600,600,601,601,601,602,602,602,602,603,603,603,603,604,604,604,605,605,605,605,605,606,606,606,607,607,607,608,608,608,608,609,609,609,609,610,610,610,610,611,611,611,612,612,612,612,612,613,613,613,613,613,614,614,614,615,615,615,615,616,616,616,616,617,617,617,618,618,618,618,619,619,619,619,620,620,620,620,621,621,621,621,621,622,622,622,622,622,623,623,623,624,624,624,624,625,625,625,625,625,626,626,626,626,626,627,627,627,627,627,627,627,628,628,628,628,628,628,629,629,629,629,629,629,630,630,630,630,630,631,631,631,631,631,632,632,632,632,633,633,633,633,633,634,634,634,634,634,634,634,634,634,634,635,635,635,635,635,635,635,636,636,636,636,636,636,637,637,637,637,637,638,638,638,638,638,638,638,638,638,639,639,639,639,639,639,639,640,640,640,640,640,641,641,641,641,641,641,641,642,642,642,642,643,643,643,643,643,643,643,644,644,644,644,644,645,645,645,645,645,645,646,646,646,646,646,646,647,647,647,647,647,647,647,648,648,648,648,648,648,648,648,648,649,649,649,649,649,649,649,649,649,649,650,650,650,650,650,651,651,651,651,651,651,652,652,652,652,652,652,652,652,653,653,653,653,653,653,653,653,653,654,654,654,654,654,654,654,655,655,655,655,655,655,655,655,656,656,656,656,656,656,656,657,657,657,657,657,657,657,657,658,658,658,658,658,658,658,658,659,659,659,659,659,659,659,659,659,660,660,660,660,660,660,660,661,661,661,661,661,661,661,662,662,662,662,662,662,662,662,662,662,663,663,663,663,663,663,663,663,663,664,664,664,664,664,664,664,664,665,665,665,665,665,665,665,665,666,666,666,666,666,666,666,667,667,667,667,667,667,667,667,668,668,668,668,668,668,668,669,669,669,669,669,669,669,669,670,670,670,670,670,670,670,670,670,670,671,671,671,671,671,671,671,671,672,672,672,672,672,672,672,672,672,673,673,673,673,673,673,674,674,674,674,674,674,674,674,674,674,675,675,675,675,675,675,675,675,676,676,676,676,676,676,676,676,677,677,677,677,677,677,678,678,678,678,678,679,679,679,679,679,679,679,679,679,680,680,680,680,680,680,680,680,681,681,681,681,681,681,682,682,682,682,682,682,682,683,683,683,683,683,684,684,684,684,684,684,684,685,685,685,685,685,685,685,686,686,686,686,686,686,686,687,687,687,687,687,687,687,688,688,688,688,688,688,688,688,688,689,689,689,689,689,689,689,689,689,690,690,690,690,690,691,691,691,691,691,692,692,692,692,692,692,692,693,693,693,693,693,693,693,693,693,694,694,694,694,694,694,694,694,694,695,695,695,695,695,695,695,696,696,696,696,696,696,696,696,697,697,697,697,697,697,697,697,697,698,698,698,699,699,699,699,699,699,699,699,700,700,700,700,700,700,700,701,701,701,701,701,701,701,701,702,702,702,702,702,702,703,703,703,703,703,703,703,703,703,704,704,704,704,704,704,704,705,705,705,705,705,705,705,706,706,706,706,706,706,706,706,707,707,707,707,707,707,708,708,708,708,708,708,708,708,709,709,709,709,709,709,710,710,710,710,710,710,710,710,711,711,711,711,711,711,711,712,712,712,712,712,712,712,712,712,713,713,713,713,713,713,713,713,714,714,714,714,714,714,714,715,715,715,715,716,716,716,716,716,716,716,716,717,717,717,717,717,717,717,718,718,718,718,718,718,718,719,719,719,719,719,719,719,720,720,720,720,720,720,720,721,721,721,721,721,722,722,722,722,722,723,723,723,723,723,723,724,724,724,724,724,724,724,724,725,725,725,725,725,726,726,726,726,726,727,727,727,727,727,727,727,727,727,728,728,728,728,728,728,728,728,729,729,729,729,729,729,730,730,730,730,730,731,731,731,731,731,731,731,732,732,732,732,732,732,732,733,733,733,733,733,733,734,734,734,734,734,734,734,734,734,734,735,735,735,735,735,735,735,736,736,736,736,736,736,736,737,737,737,737,737,737,737,738,738,738,738,738,739,739,739,739,739,739,739,739,740,740,740,740,740,740,740,741,741,741,741,741,741,741,742,742,742,742,743,743,743,743,743,743,744,744,744,744,744,744,744,744,744,745,745,745,745,745,745,745,745,746,746,746,746,746,746,747,747,747,747,747,748,748,748,748,748,748,748,749,749,749,749,749,749,750,750,750,750,750,750,750,751,751,751,751,752,752,752,752,752,752,753,753,753,753,753,754,754,754,754,754,754,754,755,755,755,755,755,755,755,756,756,756,756,756,756,756,757,757,757,757,758,758,758,758,758,759,759,759,759,759,759,759,760,760,760,760,760,760,761,761,761,761,761,761,761,762,762,762,762,762,762,763,763,763,763,763,763,763,764,764,764,764,764,764,764,765,765,765,765,765,765,765,765,766,766,766,766,766,766,766,766,767,767,767,767,767,768,768,768,768,768,768,769,769,769,769,769,769,770,770,770,770,770,771,771,771,771,771,771,772,772,772,772,772,772,773,773,773,773,773,773,774,774,774,774,774,775,775,775,775,775,775,776,776,776,776,776,776,777,777,777,777,777,777,778,778,778,778,778,779,779,779,779,779,779,779,779,780,780,780,780,780,781,781,781,781,781,781,782,782,782,782,783,783,783,783,783,783,783,783,784,784,784,784,784,784,785,785,785,785,785,785,786,786,786,786,786,786,787,787,787,787,787,787,788,788,788,788,788,788,788,789,789,789,789,789,789,789,790,790,790,790,790,791,791,791,791,791,791,791,791,792,792,792,792,792,792,792,793,793,793,793,793,794,794,794,794,794,794,795,795,795,795,795,795,795,795,795,796,796,796,796,796,796,796,796,797,797,797,797,797,797,797,798,798,798,798,798,798,798,799,799,799,799,799,799,800,800,800,800,800,800,801,801,801,801,801,801,802,802,802,802,802,802,803,803,803,803,803,803,803,804,804,804,804,804,804,805,805,805,805,805,805,805,806,806,806,806,807,807,807,807,807,807,808,808,808,808,808,808,808,808,809,809,809,809,809,809,809,809,810,810,810,810,810,810,810,811,811,811,811,811,811,811,812,812,812,812,812,812,813,813,813,813,813,813,813,814,814,814,814,814,814,815,815,815,815,815,815,816,816,816,816,816,816,817,817,817,817,817,817,818,818,818,818,818,818,819,819,819,819,820,820,820,820,820,820,820,821,821,821,821,822,822,822,822,822,823,823,823,823,823,824,824,824,824,824,825,825,825,825,825,826,826,826,826,827,827,828,828,828,829,829,829,829,830,830,830,831,831,831,831,831,832,832,832,833,833,833,834,834,834,834,834,835,835,835,835,835,835,836,836,836,836,836,837,837,837,838,838,838,838,839,839,839,840,840,840,840,841,841,841,842,842,842,842,842,843,843,843,844,844,844,844,844,845,845,845,846,846,847,847,847,847,848,848,848,848,849,849,849,849,850,850,851,851,851,851,852,852,852,853,853,853,854,854,854,854,855,855,856,856,856,857,857,857,858,858,858,858,859,859,860,860,860,861,861,862,862,862,863,863,864,864,864,864,865,865,866,866,866,866,867,867,868,868,868,869,869,869,870,870,871,871,871,872,872,872,873,873,874,874,875,875,876,876,877,877,878,878,878,879,879,879,880,880,880,881,881,881,882,882,882,883,884,884,884,885,885,886,887,887,888,889,889,890,890,891,891,892,892,893,893,894,894,894,894,895,895,896,897,897,897,897,898,898,898,899,899,900,900,901,901,902,902,902,903,903,904,905,905,906,906,907,907,908,908,909,910,910,911,911,912,913,914,914,915,915,916,916,917,918,918,919,919,920,920,920,921,922,922,923,925,925,926,927,928,928,930,930,931,931,931,933,933,934,934,934,935,936,937,938,939,940,940,941,942,943,944,944,945,945,946,947,947,948,949,950,950,951,952,953,954,954,955,956,957,957,958,959,959,960,961,963,964,965,966,966,966,967,967,968,969,970,971,972,973,974,975,976,977,977,978,979,980,981,983,984,985,987,987,989,991,991,992,993,995,997,999,1001,1001,1002,1003,1004,1006,1007,1008,1010,1010,1011,1011,1012,1014,1015,1017,1019,1020,1021,1022,1023,1024,1025,1026,1028,1029,1030,1031,1032,1034,1035,1037,1039,1039,1040,1042,1043,1043,1045,1047,1049,1049,1051,1052,1052,1054,1058,1060,1063,1064,1065,1066,1067,1071,1073,1074,1075,1076,1077,1078,1079,1080,1082,1083,1086,1086,1090,1091,1092,1093,1094,1095,1097,1098,1099,1101,1102,1102,1105,1107,1108,1109,1111,1112,1113,1115,1117,1119,1119,1120,1122,1124,1125,1127,1128,1130,1131,1132,1133,1136,1137,1138,1140,1142,1143,1145,1147,1150,1152,1154,1156,1156,1158,1160,1162,1163,1165,1167,1168,1169,1170,1172,1174,1178,1180,1182,1184,1184,1186,1187,1191,1193,1195,1196,1199,1200,1200,1203,1204,1206,1209,1210,1211,1213,1213,1215,1219,1219,1221,1222,1224,1224,1227,1229,1234,1237,1239,1241,1242,1245,1246,1249,1250,1251,1252,1256,1257,1258,1259,1261,1263,1264,1265,1266,1271,1273,1275,1277,1280,1281,1283,1284,1286,1288,1290,1293,1295,1297,1297,1302,1304,1306,1308,1311,1313,1315,1317,1318,1320,1323,1325,1327,1332,1333,1334,1337,1340,1342,1345,1347,1349,1351,1353,1354,1355,1358,1359,1361,1363,1365,1367,1369,1372,1375,1379,1381,1383,1387,1389,1393,1395,1396,1398,1402,1403,1406,1408,1410,1413,1414,1416,1419,1423,1428,1428,1430,1432,1434,1437,1438,1441,1444,1447,1449,1452,1453,1455,1457,1460,1461,1467,1470,1472,1474,1476,1477,1479,1480,1485,1487,1489,1491,1492,1495,1497,1500,1502,1503,1506,1508,1511,1515,1516,1521,1524,1526,1529,1532,1534,1535,1536,1537,1538,1542,1545,1546,1548,1552,1553,1555,1557,1559,1563,1565,1569,1573,1576,1578,1581,1584,1587,1592,1593,1600,1602,1604,1606,1609,1613,1615,1616,1625,1627,1629,1631,1633,1634,1636,1639,1641,1644,1649,1652,1654,1656,1658,1661,1664,1667,1673,1676,1681,1682,1686,1688,1690,1691,1693,1696,1700,1704,1708,1712,1714,1716,1718,1719,1722,1726,1729,1731,1735,1739,1740,1743,1744,1748,1750,1752,1757,1761,1763,1769,1773,1776,1780,1782,1785,1788,1789,1795,1798,1802,1803,1806,1811,1814,1818,1821,1829,1836,1840,1844,1845,1847,1852,1854,1857,1865,1874,1877,1881,1883,1887,1891,1894,1899,1901,1905,1911,1914,1917,1921,1925,1927,1931,1938,1940,1948,1951,1955,1957,1962,1965,1970,1973,1974,1977,1980,1987,1991,1993,1997,2001,2005,2008,2010,2014,2020,2023,2024,2027,2032,2033,2036,2044,2046,2049,2053,2055,2057,2059,2064,2065,2073,2076,2079,2081,2085,2093,2099,2104,2107,2112,2113,2119,2120,2126,2126,2137,2139,2142,2146,2149,2153,2156,2158,2161,2163,2167,2170,2176,2180,2182,2185,2189,2192,2196,2200,2206,2210,2213,2214,2218,2219,2223,2226,2228,2231,2234,2237,2246,2246,2251,2254,2255,2259,2260,2267,2268,2270,2273,2275,2280,2286,2289,2292,2295,2307,2308,2312,2316,2319,2322,2324,2328,2331,2334,2340,2345,2346,2351,2355,2361,2365,2368,2376,2379,2382,2385,2390,2395,2397,2401,2408,2416,2422,2427,2435,2437,2443,2447,2452,2455,2458,2462,2468,2475,2479,2480,2482,2486,2488,2489,2496,2498,2504,2510,2516,2526,2532,2536,2541,2546,2550,2552,2559,2561,2565,2570,2574,2582,2587,2591,2596,2599,2602,2613,2620,2623,2628,2633,2639,2642,2650,2656,2660,2665,2674,2676,2679,2689,2693,2696,2701,2707,2715,2717,2720,2731,2740,2746,2753,2758,2766,2774,2778,2788,2796,2803,2820,2826,2837,2847,2859,2870,2875,2884,2895,2905,2916,2938,2955,2968,2976,2995,3005,3018,3022,3026,3040,3045,3055,3073,3093,3116,3134,3175,3182,3202,3212,3238,3251,3276,3304,3326,3338,3364,3399,3418,3443,3464,3535,3552,3563,3594,3627,3664,3714,3754,3775,3806,3863,3895,4014,4055,4115,4135,4326,4379,4493,4655,4747,4868,4989,5196,5294,5401,5747,6067,6337,6688,6942,7181,7281,8000])
            # right_target_cf = np.array([161,236,288,337,354,364,370,380,384,390,391,396,398,399,402,404,406,409,413,419,421,429,432,438,448,451,459,462,465,472,473,477,480,485,487,492,494,496,500,502,507,511,511,514,517,519,521,523,525,527,528,530,531,532,534,535,535,537,538,541,541,543,545,547,548,549,550,550,551,552,553,554,555,555,556,557,558,559,559,560,560,560,561,561,562,562,563,564,564,564,565,565,566,566,566,567,567,568,569,569,570,570,570,571,572,572,572,573,574,574,575,575,575,575,576,576,576,577,577,577,578,578,578,578,579,579,580,580,580,580,581,581,581,581,582,582,582,582,583,583,584,584,584,585,585,586,586,587,587,587,587,588,588,588,589,589,589,589,590,590,590,590,591,591,592,592,592,592,593,593,594,594,594,594,595,595,595,596,596,596,597,597,597,597,598,598,598,598,598,599,599,599,600,600,600,600,601,601,601,602,602,602,602,602,603,603,603,603,603,604,604,604,604,604,604,604,605,605,605,605,606,606,606,606,606,606,607,607,607,607,607,608,608,608,608,608,609,609,609,609,609,609,610,610,610,611,611,611,611,611,612,612,612,612,612,612,613,613,613,613,613,614,614,614,614,614,615,615,615,615,616,616,616,616,616,617,617,617,617,617,618,618,618,618,618,618,619,619,619,619,620,620,620,620,620,620,621,621,621,621,622,622,622,622,623,623,623,623,623,624,624,624,624,624,625,625,625,625,625,626,626,626,626,627,627,627,627,627,627,628,628,628,628,628,629,629,629,629,629,630,630,630,630,630,631,631,631,631,631,632,632,632,632,632,632,633,633,633,633,633,633,633,634,634,634,634,634,635,635,635,635,636,636,636,636,636,636,636,637,637,637,637,637,638,638,638,638,638,639,639,639,639,639,639,640,640,640,641,641,641,641,642,642,642,642,642,643,643,643,643,644,644,644,644,644,644,645,645,645,645,646,646,646,646,646,646,646,647,647,647,647,647,648,648,648,649,649,649,649,649,649,650,650,650,650,650,650,651,651,651,651,652,652,652,652,652,653,653,653,653,653,654,654,654,654,654,655,655,655,655,655,656,656,656,656,657,657,657,657,657,657,658,658,658,658,659,659,659,659,659,659,660,660,660,660,660,661,661,661,661,661,662,662,662,662,662,662,663,663,663,663,663,664,664,664,664,664,664,665,665,665,665,665,665,666,666,666,666,666,666,667,667,667,667,667,667,667,668,668,668,668,668,668,669,669,669,669,669,669,670,670,670,670,671,671,671,671,671,671,672,672,672,672,672,673,673,673,673,673,673,673,674,674,674,674,675,675,675,675,675,675,676,676,676,676,676,677,677,677,677,677,678,678,678,678,678,678,679,679,679,679,679,680,680,680,680,680,680,681,681,681,681,681,682,682,682,682,682,682,683,683,683,683,683,684,684,684,684,684,684,685,685,685,685,685,686,686,686,686,686,686,687,687,687,687,687,687,688,688,688,688,688,689,689,689,689,689,690,690,690,690,690,691,691,691,691,691,691,692,692,692,692,692,692,692,693,693,693,693,693,693,694,694,694,694,694,694,695,695,695,695,695,695,696,696,696,696,696,696,697,697,697,697,697,698,698,698,698,698,698,699,699,699,699,699,700,700,700,700,700,700,700,701,701,701,701,701,701,702,702,702,702,702,702,702,702,703,703,703,703,703,703,703,703,704,704,704,704,704,704,704,705,705,705,705,705,705,705,706,706,706,706,707,707,707,707,707,707,707,707,708,708,708,708,708,708,708,708,709,709,709,709,709,709,710,710,710,710,710,710,710,710,711,711,711,711,711,711,711,712,712,712,712,712,712,712,713,713,713,713,713,714,714,714,714,714,714,715,715,715,715,715,715,716,716,716,716,716,716,716,717,717,717,717,717,717,717,718,718,718,718,718,718,718,719,719,719,719,719,719,719,720,720,720,720,720,721,721,721,721,721,721,721,721,721,721,721,722,722,722,722,722,723,723,723,723,723,723,724,724,724,724,724,724,724,724,725,725,725,725,725,725,726,726,726,726,726,726,727,727,727,727,727,727,727,728,728,728,728,728,729,729,729,729,729,729,729,730,730,730,730,730,730,730,731,731,731,731,731,731,731,731,731,732,732,732,732,732,732,733,733,733,733,733,734,734,734,734,735,735,735,735,735,735,736,736,736,736,736,737,737,737,737,737,737,738,738,738,738,738,738,738,738,739,739,739,739,739,739,740,740,740,740,740,740,740,740,741,741,741,741,741,742,742,742,742,742,742,743,743,743,743,743,744,744,744,744,744,744,744,745,745,745,745,745,746,746,746,746,746,747,747,747,747,747,747,747,748,748,748,748,749,749,749,749,749,749,750,750,750,750,750,750,751,751,751,751,751,751,751,752,752,752,752,753,753,753,753,754,754,754,754,754,755,755,755,755,755,756,756,756,756,756,756,756,757,757,757,757,757,757,758,758,758,758,758,759,759,759,759,759,759,759,760,760,760,760,760,760,761,761,761,761,761,761,762,762,762,762,762,762,762,763,763,763,763,764,764,764,764,764,764,764,765,765,765,765,765,765,766,766,766,766,766,766,767,767,767,767,767,767,768,768,768,769,769,769,769,769,769,770,770,770,770,770,770,771,771,771,771,771,771,772,772,772,772,772,773,773,773,773,773,773,774,774,774,774,774,774,775,775,775,775,775,775,775,776,776,776,777,777,777,777,777,777,778,778,778,778,778,779,779,779,779,779,779,779,779,780,780,780,780,780,781,781,781,781,781,781,781,782,782,782,782,782,783,783,783,783,783,784,784,784,784,785,785,785,785,785,785,786,786,786,786,786,786,787,787,787,787,787,788,788,788,788,788,788,789,789,789,790,790,790,790,790,790,791,791,791,791,791,792,792,792,792,792,793,793,793,793,793,793,794,794,794,794,795,795,795,795,795,795,795,796,796,796,796,796,796,797,797,797,797,797,798,798,798,798,798,799,799,799,799,799,799,799,800,800,800,800,800,800,800,801,801,801,801,802,802,802,802,802,802,802,802,803,803,803,803,803,804,804,804,804,804,804,805,805,805,806,806,806,806,806,807,807,807,807,808,808,808,808,808,809,809,809,809,809,810,810,810,810,810,811,811,811,811,811,812,812,812,812,812,813,813,813,813,813,814,814,814,814,815,815,815,815,815,815,816,816,816,816,816,817,817,817,817,817,817,818,818,818,818,818,818,819,819,819,819,819,819,820,820,820,820,821,821,821,821,821,821,822,822,822,822,822,823,823,823,823,823,824,824,824,824,824,825,825,825,825,825,825,826,826,826,826,826,827,827,827,827,827,827,828,828,828,828,828,829,829,829,829,830,830,830,830,830,831,831,831,831,831,832,832,832,832,832,833,833,833,833,834,834,834,835,835,835,835,835,835,836,836,836,836,837,837,837,837,837,837,838,838,838,838,839,839,839,839,840,840,840,841,841,841,841,841,842,842,842,842,843,843,843,843,844,844,844,844,844,845,845,845,846,846,846,846,846,846,846,847,847,847,847,847,848,848,848,848,849,849,849,849,850,850,850,850,851,851,851,851,851,851,852,852,852,853,853,853,853,854,854,855,855,855,855,855,856,856,856,856,857,857,857,857,858,858,858,858,859,859,859,860,860,860,860,860,861,861,861,861,862,862,862,863,863,863,863,863,864,864,864,864,865,865,865,866,866,866,866,867,867,867,868,868,868,868,869,869,869,869,870,870,871,871,871,871,872,873,873,873,873,874,874,874,874,875,875,876,876,876,877,877,877,878,878,878,878,879,879,879,880,880,881,881,881,882,882,882,882,883,883,883,883,884,884,884,885,885,885,886,886,887,887,887,888,888,888,888,889,889,889,890,890,890,890,891,891,892,892,893,893,893,894,894,894,895,895,895,896,896,897,897,898,898,899,899,899,900,900,900,901,901,901,902,902,902,903,904,904,905,905,905,906,906,906,907,907,907,908,908,908,909,909,909,909,910,910,911,912,912,913,913,914,914,914,915,915,916,916,916,917,918,919,919,919,920,921,921,922,922,923,923,924,924,924,925,925,926,926,926,928,928,928,929,929,930,930,930,931,931,932,932,932,932,933,933,934,934,935,935,936,937,938,940,940,941,941,942,943,943,944,944,945,945,946,946,947,948,948,949,950,950,951,951,952,953,953,953,954,954,955,956,956,957,958,958,959,960,960,961,962,962,963,964,965,966,966,968,968,969,970,970,972,973,974,975,976,976,976,977,978,979,980,980,981,982,983,984,985,985,986,987,988,990,991,992,993,994,995,995,996,997,997,998,999,1001,1002,1004,1005,1007,1008,1009,1009,1010,1010,1011,1012,1012,1014,1015,1016,1017,1018,1019,1021,1022,1023,1024,1025,1026,1028,1028,1030,1031,1033,1035,1036,1037,1039,1040,1041,1045,1046,1047,1049,1050,1052,1053,1054,1055,1056,1058,1059,1061,1062,1062,1063,1064,1066,1067,1069,1071,1073,1074,1075,1076,1077,1078,1080,1081,1082,1082,1084,1084,1086,1087,1089,1091,1092,1093,1094,1096,1099,1100,1102,1105,1106,1107,1109,1111,1113,1113,1115,1117,1118,1119,1121,1123,1123,1124,1125,1126,1128,1129,1131,1132,1134,1135,1136,1139,1141,1145,1147,1151,1152,1152,1155,1156,1160,1161,1164,1165,1167,1168,1170,1171,1172,1173,1175,1176,1177,1179,1182,1183,1186,1188,1190,1191,1193,1195,1198,1201,1204,1205,1207,1208,1210,1213,1214,1217,1218,1220,1222,1224,1225,1227,1228,1231,1232,1233,1236,1238,1241,1243,1245,1248,1250,1252,1256,1258,1261,1262,1263,1266,1270,1272,1275,1277,1279,1281,1282,1285,1288,1292,1295,1296,1298,1300,1303,1304,1306,1309,1311,1312,1314,1318,1320,1323,1326,1328,1332,1336,1340,1343,1349,1354,1357,1360,1364,1367,1371,1375,1378,1380,1383,1385,1389,1391,1393,1399,1401,1405,1409,1414,1416,1419,1421,1423,1430,1432,1434,1438,1441,1444,1450,1451,1454,1459,1462,1465,1468,1473,1475,1478,1482,1485,1487,1491,1493,1500,1502,1506,1507,1510,1514,1517,1520,1523,1525,1530,1532,1535,1537,1542,1546,1549,1551,1553,1558,1561,1568,1570,1574,1577,1582,1585,1589,1597,1602,1605,1607,1611,1615,1618,1621,1627,1632,1636,1641,1645,1650,1655,1657,1661,1666,1674,1679,1681,1685,1689,1691,1697,1699,1703,1705,1711,1716,1717,1722,1727,1730,1734,1735,1740,1747,1749,1755,1757,1759,1768,1771,1775,1780,1786,1788,1792,1794,1798,1802,1804,1806,1807,1809,1812,1814,1817,1818,1821,1827,1830,1833,1837,1841,1843,1847,1852,1855,1859,1862,1866,1869,1873,1876,1879,1883,1890,1895,1901,1907,1909,1913,1920,1924,1930,1931,1937,1940,1942,1945,1949,1953,1957,1961,1965,1967,1971,1973,1976,1978,1980,1984,1989,1992,1996,2003,2007,2010,2016,2019,2023,2027,2032,2035,2041,2045,2049,2058,2060,2067,2069,2071,2074,2077,2082,2085,2089,2097,2100,2103,2108,2115,2117,2120,2123,2128,2130,2134,2137,2141,2150,2152,2156,2161,2163,2167,2172,2178,2184,2187,2192,2195,2199,2201,2205,2208,2213,2220,2222,2225,2228,2231,2235,2240,2248,2254,2256,2258,2261,2264,2272,2274,2278,2283,2286,2290,2293,2295,2299,2302,2308,2311,2318,2324,2328,2330,2334,2339,2343,2349,2351,2357,2365,2368,2380,2384,2389,2393,2403,2408,2415,2421,2426,2435,2436,2444,2448,2455,2460,2466,2475,2481,2485,2493,2498,2506,2514,2518,2522,2527,2531,2536,2547,2555,2561,2568,2574,2581,2584,2593,2596,2604,2607,2612,2618,2623,2628,2633,2639,2643,2649,2653,2662,2668,2681,2687,2691,2705,2712,2726,2732,2740,2746,2749,2755,2761,2766,2774,2779,2794,2805,2813,2820,2825,2830,2836,2849,2852,2859,2866,2872,2878,2888,2893,2898,2907,2912,2918,2925,2934,2938,2943,2952,2958,2964,2969,2973,2983,2991,3001,3006,3017,3020,3029,3031,3039,3046,3050,3054,3057,3067,3072,3081,3084,3088,3091,3100,3105,3110,3113,3117,3126,3131,3135,3141,3148,3158,3161,3169,3178,3185,3191,3194,3199,3207,3210,3215,3226,3231,3232,3242,3255,3268,3276,3286,3299,3306,3315,3323,3331,3338,3352,3367,3379,3391,3419,3433,3451,3463,3479,3503,3522,3532,3570,3598,3621,3642,3657,3699,3718,3738,3759,3828,3904,3985,4046,4104,4169,4239,4374,4659,5105,5734,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_mni0/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #MNI original
            # left_target_cf = np.array([166,400,431,457,479,498,507,516,521,526,532,539,543,548,553,559,563,567,572,575,578,582,584,587,589,592,595,598,600,602,604,606,609,611,613,615,617,619,621,622,625,626,627,629,630,632,634,634,636,637,638,639,640,642,643,645,646,647,648,649,650,651,653,653,654,655,657,658,659,660,661,662,662,663,664,665,667,668,669,670,670,671,672,674,674,675,676,678,679,680,681,682,683,685,686,687,688,689,690,692,693,694,694,695,697,697,699,700,701,702,703,704,706,707,708,709,710,711,712,713,714,716,717,718,719,720,722,723,724,726,727,728,729,730,732,733,734,735,736,737,738,739,741,742,743,744,745,746,748,749,750,752,754,755,756,757,759,760,761,763,764,765,766,767,768,770,771,773,774,775,777,778,779,781,782,783,785,786,787,789,790,791,792,794,795,796,797,798,799,800,802,803,804,805,807,808,809,810,811,813,814,815,817,818,820,821,823,824,826,829,831,833,835,836,839,841,843,845,848,850,852,855,858,860,863,866,869,872,876,879,881,885,890,894,897,900,903,908,913,918,922,929,934,940,946,952,957,965,971,978,987,998,1008,1016,1026,1036,1046,1060,1073,1082,1095,1106,1118,1129,1141,1156,1169,1184,1199,1212,1224,1245,1257,1272,1287,1306,1322,1341,1356,1373,1396,1414,1433,1453,1474,1491,1508,1531,1546,1564,1591,1615,1635,1657,1686,1707,1727,1750,1778,1803,1840,1873,1901,1930,1964,1992,2021,2048,2075,2111,2141,2167,2196,2223,2250,2272,2308,2334,2368,2401,2447,2480,2510,2552,2591,2633,2676,2717,2774,2847,2938,3026,3175,3326,3552,3806,4379,5401,8000])
            # right_target_cf = np.array([161,384,406,448,480,506,525,535,547,555,560,564,567,572,575,578,580,582,585,588,590,593,595,598,599,602,603,605,606,608,609,611,613,614,616,618,619,621,623,624,626,627,629,630,632,633,635,636,638,639,641,643,645,646,648,649,651,653,654,656,657,659,660,662,664,665,666,667,669,670,672,673,675,676,678,679,681,682,683,685,686,688,689,691,692,693,695,696,697,699,700,702,703,703,705,706,707,708,710,710,712,713,714,716,717,718,719,720,721,722,724,725,726,727,729,730,731,732,733,735,737,738,739,740,741,743,744,746,747,749,750,751,753,755,756,757,759,760,761,762,764,765,767,768,770,771,773,774,775,777,778,779,781,782,784,785,787,788,790,792,793,795,796,797,799,800,802,803,804,806,808,809,811,813,814,816,817,819,820,822,823,825,826,828,829,831,833,835,836,838,840,842,844,846,847,849,851,853,855,857,859,861,863,865,867,869,872,875,878,880,883,885,888,890,893,896,900,902,906,908,912,916,920,924,928,931,934,941,945,950,954,959,966,972,979,985,993,1000,1010,1016,1025,1037,1049,1060,1071,1080,1090,1103,1116,1125,1137,1155,1170,1182,1199,1216,1229,1247,1265,1283,1304,1320,1350,1379,1403,1430,1455,1482,1508,1533,1558,1590,1626,1658,1693,1725,1755,1789,1810,1837,1862,1896,1935,1962,1987,2020,2058,2086,2121,2154,2187,2220,2254,2284,2312,2349,2393,2444,2493,2538,2593,2633,2687,2751,2813,2866,2919,2970,3029,3072,3114,3161,3210,3281,3352,3479,3657,4046,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_mni1/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #MNI by 2
            # left_target_cf = np.array([166,521,564,590,609,625,636,646,655,663,671,679,688,697,706,715,725,735,744,755,765,775,786,796,806,816,829,846,867,895,931,982,1065,1163,1283,1428,1583,1773,2017,2246,2505,2928,8000])
            # right_target_cf = np.array([161,547,580,599,612,625,637,650,663,674,686,697,707,716,725,735,746,758,769,780,792,803,816,827,842,856,874,895,923,957,1012,1094,1206,1360,1570,1815,2065,2320,2691,3115,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_mni2/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #MNI by 3
            # left_target_cf = np.array([166,600,646,675,706,739,775,810,867,1022,1428,2138,8000])
            # right_target_cf = np.array([161,604,646,686,719,754,792,832,888,1012,1430,2233,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_mni3/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            
            #MNI by 4
            left_target_cf = np.array([166,658,733,818,1232,8000])
            right_target_cf = np.array([161,663,746,842,1206,7805])
            short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            filename = target_folder + 'MNI_by_4/sam' + str(sample_id) + '_' + word + '.csv'
            np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
             
            # #MNI by 5
            # left_target_cf = np.array([166,706,867,8000])
            # right_target_cf = np.array([161,719,888,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_mni5/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")

            # #Talairach original
            # left_target_cf = np.array([166,270,353,368,374,394,398,402,409,417,421,425,430,434,439,442,444,450,454,457,460,463,467,470,473,477,483,486,490,492,495,497,498,500,501,503,504,505,507,508,510,511,512,513,515,516,517,518,519,520,520,521,522,523,524,525,526,526,528,529,530,531,531,532,533,534,535,536,537,538,539,540,540,541,542,543,543,544,545,546,546,547,548,549,550,551,551,552,553,553,554,554,556,557,558,559,560,561,561,562,562,563,564,564,565,566,566,567,568,569,569,570,570,571,572,573,573,573,574,574,575,576,576,577,577,578,578,579,579,580,580,581,582,582,582,582,583,583,583,584,584,585,585,586,586,587,587,587,588,588,589,589,590,590,590,591,591,592,592,593,593,593,594,594,595,595,596,596,597,597,597,598,598,598,599,599,600,600,600,601,601,602,602,602,602,603,603,603,604,604,604,605,605,605,606,606,606,607,607,608,608,608,609,609,609,610,610,610,611,611,611,612,612,612,612,613,613,613,613,614,614,615,615,615,615,616,616,616,617,617,618,618,618,619,619,619,620,620,620,620,621,621,621,621,622,622,622,623,623,623,624,624,624,625,625,625,625,626,626,626,626,627,627,627,627,627,628,628,628,628,628,629,629,629,629,629,630,630,630,630,631,631,631,631,632,632,632,633,633,633,633,634,634,634,634,634,634,634,635,635,635,635,635,635,636,636,636,636,636,637,637,637,637,638,638,638,638,638,638,638,639,639,639,639,639,639,640,640,640,640,641,641,641,641,641,642,642,642,643,643,643,643,643,643,644,644,644,644,645,645,645,645,645,646,646,646,646,647,647,647,647,647,647,648,648,648,648,648,648,648,649,649,649,649,649,649,649,650,650,650,650,650,651,651,651,651,651,652,652,652,652,652,652,653,653,653,653,653,653,653,654,654,654,654,654,654,655,655,655,655,655,655,656,656,656,656,656,657,657,657,657,657,657,657,658,658,658,658,658,658,659,659,659,659,659,659,659,660,660,660,660,660,660,661,661,661,661,661,662,662,662,662,662,662,662,662,663,663,663,663,663,663,663,664,664,664,664,664,664,665,665,665,665,665,665,665,666,666,666,666,666,667,667,667,667,667,667,668,668,668,668,668,668,669,669,669,669,669,669,669,670,670,670,670,670,670,670,671,671,671,671,671,671,671,672,672,672,672,672,672,672,673,673,673,673,674,674,674,674,674,674,674,674,675,675,675,675,675,675,675,676,676,676,676,676,676,677,677,677,677,677,678,678,678,678,679,679,679,679,679,679,679,680,680,680,680,680,680,681,681,681,681,681,682,682,682,682,682,683,683,683,683,683,684,684,684,684,684,685,685,685,685,685,686,686,686,686,686,686,687,687,687,687,687,687,688,688,688,688,688,688,689,689,689,689,689,689,689,690,690,690,690,690,691,691,691,691,692,692,692,692,692,692,693,693,693,693,693,693,694,694,694,694,694,694,694,694,695,695,695,695,695,696,696,696,696,696,696,697,697,697,697,697,697,697,698,698,698,699,699,699,699,699,699,700,700,700,700,700,701,701,701,701,701,701,701,702,702,702,702,702,703,703,703,703,703,703,703,704,704,704,704,704,705,705,705,705,705,705,706,706,706,706,706,706,707,707,707,707,707,708,708,708,708,708,708,709,709,709,709,709,710,710,710,710,710,710,711,711,711,711,711,711,712,712,712,712,712,712,712,713,713,713,713,713,713,714,714,714,714,714,714,715,715,715,716,716,716,716,716,716,717,717,717,717,717,717,718,718,718,718,718,718,719,719,719,719,719,720,720,720,720,720,721,721,721,721,722,722,722,722,723,723,723,723,723,724,724,724,724,724,724,725,725,725,725,726,726,726,726,726,727,727,727,727,727,727,728,728,728,728,728,728,728,729,729,729,729,730,730,730,730,731,731,731,731,731,731,732,732,732,732,732,733,733,733,733,733,734,734,734,734,734,734,734,734,735,735,735,735,735,735,736,736,736,736,736,737,737,737,737,737,737,738,738,738,738,739,739,739,739,739,739,740,740,740,740,740,740,741,741,741,741,741,742,742,742,743,743,743,743,743,744,744,744,744,744,744,744,745,745,745,745,745,745,746,746,746,746,746,747,747,747,747,748,748,748,748,748,748,749,749,749,749,750,750,750,750,750,751,751,751,751,752,752,752,752,753,753,753,753,754,754,754,754,754,754,755,755,755,755,755,755,756,756,756,756,756,757,757,757,758,758,758,758,759,759,759,759,759,759,760,760,760,760,761,761,761,761,761,761,762,762,762,762,762,763,763,763,763,763,764,764,764,764,764,764,765,765,765,765,765,765,766,766,766,766,766,766,766,767,767,767,767,768,768,768,768,769,769,769,769,769,770,770,770,770,771,771,771,771,771,772,772,772,772,772,773,773,773,773,774,774,774,774,775,775,775,775,775,776,776,776,776,777,777,777,777,777,777,778,778,778,778,779,779,779,779,779,780,780,780,780,781,781,781,781,781,782,782,782,782,783,783,783,783,783,783,784,784,784,784,784,785,785,785,785,785,786,786,786,786,787,787,787,787,787,788,788,788,788,788,789,789,789,789,789,789,790,790,790,790,791,791,791,791,791,791,792,792,792,792,792,793,793,793,793,793,794,794,794,794,795,795,795,795,795,795,795,795,796,796,796,796,796,796,797,797,797,797,797,798,798,798,798,798,798,799,799,799,799,800,800,800,800,800,801,801,801,801,801,802,802,802,802,802,803,803,803,803,803,804,804,804,804,804,805,805,805,805,805,806,806,806,806,807,807,807,807,807,808,808,808,808,808,808,809,809,809,809,809,809,810,810,810,810,810,810,811,811,811,811,811,812,812,812,812,812,813,813,813,813,813,814,814,814,814,814,815,815,815,815,815,816,816,816,816,816,817,817,817,817,818,818,818,818,818,819,819,819,820,820,820,820,820,820,821,821,821,822,822,822,822,823,823,823,823,824,824,824,825,825,825,825,825,826,826,826,827,827,828,828,829,829,829,830,830,830,831,831,831,832,832,832,833,833,834,834,834,834,835,835,835,835,835,836,836,836,836,837,837,838,838,838,839,839,839,840,840,840,841,841,842,842,842,842,843,843,844,844,844,844,845,845,845,846,846,847,847,848,848,848,848,849,849,849,850,850,851,851,851,852,852,853,853,853,854,854,855,855,856,856,857,857,857,858,858,858,859,859,860,860,861,861,862,862,863,863,864,864,865,865,865,866,866,867,867,868,868,869,869,869,870,871,871,871,872,872,873,874,874,874,875,876,877,877,878,878,879,879,879,880,880,881,881,882,882,882,883,884,884,885,886,886,887,888,889,889,890,891,891,892,893,893,894,894,895,895,896,897,897,897,898,898,899,899,900,900,901,902,902,902,903,903,905,905,906,907,907,908,909,909,910,911,912,913,914,914,915,916,917,917,918,919,919,920,920,921,922,923,924,925,926,927,928,930,930,931,931,933,933,934,934,935,936,938,939,940,941,942,943,944,945,945,946,947,948,949,950,951,952,953,954,955,956,957,957,958,959,960,962,964,965,966,966,967,967,969,969,971,972,973,975,976,977,978,979,980,982,984,985,987,987,990,991,992,993,997,999,1001,1002,1002,1004,1006,1008,1009,1010,1011,1012,1014,1015,1017,1019,1021,1023,1024,1025,1026,1028,1029,1031,1032,1034,1036,1038,1039,1041,1042,1043,1045,1048,1049,1051,1052,1054,1057,1060,1063,1064,1066,1067,1072,1073,1074,1076,1078,1078,1080,1082,1084,1086,1090,1091,1092,1094,1095,1097,1099,1101,1102,1103,1107,1108,1109,1111,1113,1115,1117,1119,1120,1122,1124,1126,1128,1131,1131,1133,1135,1138,1139,1142,1143,1146,1149,1151,1154,1156,1158,1160,1162,1163,1166,1168,1169,1171,1174,1178,1181,1182,1184,1186,1188,1192,1194,1196,1199,1200,1202,1204,1208,1209,1211,1213,1214,1218,1219,1221,1223,1224,1227,1230,1236,1238,1241,1244,1246,1249,1250,1251,1255,1257,1259,1261,1262,1264,1266,1270,1272,1276,1278,1280,1283,1284,1287,1289,1292,1295,1297,1301,1304,1308,1309,1313,1315,1317,1320,1322,1325,1329,1333,1334,1338,1341,1343,1347,1350,1352,1353,1355,1358,1361,1362,1365,1368,1371,1375,1379,1381,1386,1389,1393,1395,1397,1402,1403,1407,1410,1413,1415,1418,1423,1428,1429,1431,1434,1437,1441,1443,1447,1449,1453,1455,1457,1460,1466,1470,1473,1474,1477,1478,1481,1485,1489,1491,1493,1496,1500,1502,1506,1508,1510,1515,1519,1523,1526,1531,1533,1535,1536,1537,1541,1543,1546,1550,1553,1555,1558,1560,1564,1566,1574,1577,1581,1584,1588,1592,1598,1602,1605,1607,1612,1615,1622,1626,1629,1631,1634,1635,1639,1642,1645,1651,1654,1657,1660,1664,1669,1673,1679,1682,1686,1689,1691,1693,1697,1702,1707,1712,1714,1717,1719,1722,1727,1730,1734,1739,1741,1744,1748,1751,1756,1761,1763,1772,1776,1779,1782,1786,1789,1793,1800,1802,1804,1810,1814,1819,1829,1835,1841,1845,1847,1852,1856,1859,1873,1877,1882,1886,1891,1894,1900,1904,1911,1914,1920,1923,1927,1933,1939,1948,1951,1955,1961,1964,1971,1973,1977,1979,1987,1992,1997,2001,2005,2009,2013,2020,2023,2027,2029,2033,2038,2046,2049,2053,2056,2059,2064,2066,2075,2078,2081,2085,2097,2103,2107,2112,2116,2120,2126,2131,2138,2141,2146,2152,2156,2158,2163,2165,2170,2176,2182,2183,2189,2192,2198,2206,2210,2214,2216,2219,2223,2227,2231,2234,2237,2246,2250,2254,2255,2259,2264,2268,2270,2274,2280,2286,2290,2293,2303,2308,2314,2319,2322,2324,2329,2333,2340,2345,2347,2355,2361,2367,2374,2379,2382,2386,2393,2397,2403,2409,2418,2426,2435,2440,2447,2451,2456,2459,2468,2475,2480,2482,2486,2488,2492,2497,2504,2510,2522,2529,2536,2542,2548,2552,2559,2562,2568,2574,2582,2590,2593,2599,2610,2617,2622,2628,2634,2641,2650,2656,2662,2669,2676,2679,2691,2695,2701,2707,2716,2719,2731,2743,2751,2758,2766,2776,2784,2795,2803,2822,2832,2847,2860,2871,2882,2895,2906,2928,2951,2967,2983,3002,3017,3022,3026,3043,3052,3073,3101,3123,3175,3182,3204,3236,3251,3280,3317,3336,3364,3403,3435,3464,3535,3553,3578,3627,3680,3740,3766,3806,3875,3976,4041,4115,4138,4363,4443,4655,4802,4953,5192,5294,5526,6046,6337,6699,7079,7271,8000])
            # right_target_cf = np.array([161,258,323,348,364,374,382,390,392,396,399,402,405,408,411,416,423,430,436,448,454,461,464,472,475,480,484,487,493,496,500,503,509,511,514,517,520,523,525,527,530,531,532,535,535,537,539,541,543,545,547,548,550,550,551,553,554,555,556,557,558,559,559,560,560,561,562,562,563,564,564,565,565,566,566,567,568,568,569,570,570,571,572,572,572,574,574,575,575,575,576,576,576,577,577,578,578,578,579,579,580,580,581,581,581,581,582,582,582,583,584,584,584,585,585,586,586,587,587,587,588,588,589,589,589,590,590,590,591,591,592,592,592,593,593,594,594,595,595,595,596,596,597,597,597,598,598,598,598,599,599,599,600,600,600,601,601,601,602,602,602,603,603,603,603,603,604,604,604,604,604,605,605,605,606,606,606,606,606,607,607,607,607,608,608,608,608,609,609,609,609,610,610,610,611,611,611,611,612,612,612,612,613,613,613,613,614,614,614,614,614,615,615,615,616,616,616,617,617,617,617,618,618,618,618,618,619,619,619,620,620,620,620,620,621,621,621,622,622,622,623,623,623,623,623,624,624,624,625,625,625,625,626,626,626,627,627,627,627,627,628,628,628,628,629,629,629,629,630,630,630,630,631,631,631,631,632,632,632,632,632,633,633,633,633,633,634,634,634,634,635,635,635,636,636,636,636,636,636,637,637,637,637,638,638,638,638,639,639,639,639,640,640,640,641,641,641,642,642,642,642,643,643,643,644,644,644,644,645,645,645,645,646,646,646,646,646,646,647,647,647,648,648,648,649,649,649,649,650,650,650,650,650,651,651,651,651,652,652,652,652,653,653,653,654,654,654,654,655,655,655,655,656,656,656,656,657,657,657,657,658,658,658,659,659,659,659,659,660,660,660,660,661,661,661,661,662,662,662,662,663,663,663,663,663,664,664,664,664,665,665,665,665,665,666,666,666,666,666,667,667,667,667,667,668,668,668,668,668,669,669,669,669,669,670,670,670,671,671,671,671,671,672,672,672,672,673,673,673,673,673,673,674,674,674,675,675,675,675,676,676,676,676,677,677,677,677,678,678,678,678,678,679,679,679,679,680,680,680,680,680,681,681,681,682,682,682,682,682,683,683,683,683,684,684,684,684,684,685,685,685,685,686,686,686,686,687,687,687,687,687,688,688,688,688,689,689,689,689,689,690,690,690,691,691,691,691,691,692,692,692,692,692,692,693,693,693,693,694,694,694,694,694,695,695,695,695,695,696,696,696,696,697,697,697,697,697,698,698,698,698,699,699,699,699,700,700,700,700,700,700,701,701,701,701,702,702,702,702,702,702,703,703,703,703,703,703,703,704,704,704,704,704,704,705,705,705,705,705,706,706,706,706,707,707,707,707,707,707,708,708,708,708,708,708,709,709,709,709,709,710,710,710,710,710,710,711,711,711,711,711,711,712,712,712,712,712,713,713,713,713,714,714,714,714,714,715,715,715,715,715,716,716,716,716,716,717,717,717,717,717,717,718,718,718,718,718,719,719,719,719,719,720,720,720,720,720,721,721,721,721,721,721,721,721,722,722,722,722,723,723,723,723,723,724,724,724,724,724,724,725,725,725,725,725,726,726,726,726,726,727,727,727,727,727,728,728,728,728,728,729,729,729,729,729,730,730,730,730,730,730,731,731,731,731,731,731,731,732,732,732,732,733,733,733,733,734,734,734,734,735,735,735,735,736,736,736,736,737,737,737,737,737,738,738,738,738,738,738,739,739,739,739,739,740,740,740,740,740,740,741,741,741,741,742,742,742,742,742,743,743,743,743,744,744,744,744,744,744,745,745,745,746,746,746,746,747,747,747,747,747,748,748,748,748,749,749,749,749,750,750,750,750,750,750,751,751,751,751,751,752,752,752,753,753,753,754,754,754,754,755,755,755,755,756,756,756,756,756,756,757,757,757,757,758,758,758,758,759,759,759,759,759,759,760,760,760,760,761,761,761,761,761,762,762,762,762,762,762,763,763,763,764,764,764,764,764,764,765,765,765,765,766,766,766,766,766,767,767,767,767,768,768,768,769,769,769,769,769,770,770,770,770,770,771,771,771,771,772,772,772,772,772,773,773,773,773,774,774,774,774,774,775,775,775,775,775,776,776,776,777,777,777,777,778,778,778,778,779,779,779,779,779,779,779,780,780,780,780,781,781,781,781,781,782,782,782,782,783,783,783,783,784,784,784,784,785,785,785,785,786,786,786,786,786,787,787,787,787,788,788,788,788,789,789,789,790,790,790,790,790,791,791,791,792,792,792,792,792,793,793,793,793,793,794,794,794,795,795,795,795,795,796,796,796,796,796,797,797,797,797,798,798,798,798,799,799,799,799,799,800,800,800,800,800,800,801,801,801,802,802,802,802,802,802,803,803,803,803,804,804,804,804,804,805,805,806,806,806,806,807,807,807,807,808,808,808,808,809,809,809,810,810,810,810,811,811,811,811,812,812,812,812,813,813,813,813,814,814,814,815,815,815,815,815,816,816,816,816,817,817,817,817,818,818,818,818,818,819,819,819,819,819,820,820,820,821,821,821,821,821,822,822,822,822,823,823,823,823,824,824,824,824,825,825,825,825,825,826,826,826,826,827,827,827,827,828,828,828,828,829,829,829,829,830,830,830,830,831,831,831,832,832,832,832,833,833,833,833,834,834,835,835,835,835,836,836,836,836,837,837,837,837,838,838,838,838,839,839,839,840,840,840,841,841,841,842,842,842,843,843,843,844,844,844,844,845,845,845,846,846,846,846,846,847,847,847,847,848,848,848,849,849,849,849,850,850,851,851,851,851,851,852,852,852,853,853,853,854,854,855,855,855,855,856,856,856,857,857,857,858,858,858,859,859,859,860,860,860,861,861,861,862,862,862,863,863,863,863,864,864,864,865,865,865,866,866,866,867,867,868,868,868,869,869,869,870,870,871,871,871,872,873,873,873,874,874,874,875,875,876,876,877,877,878,878,878,879,879,879,880,880,881,881,882,882,882,883,883,883,884,884,884,885,885,886,886,887,887,888,888,888,889,889,889,890,890,890,891,892,892,893,893,894,894,894,895,895,896,897,897,898,898,899,899,900,900,901,901,901,902,902,903,904,904,905,905,906,906,906,907,907,908,908,909,909,909,910,910,911,912,913,913,914,914,915,915,916,916,917,918,919,919,920,921,922,922,923,923,924,924,925,926,926,927,928,928,929,929,930,930,931,931,932,932,932,933,934,934,935,936,937,938,940,940,941,942,943,944,944,945,945,946,947,948,949,950,950,951,952,953,953,954,954,955,956,957,957,958,959,960,961,962,963,963,964,966,966,968,969,970,971,972,973,975,976,976,977,978,979,980,981,982,983,984,985,986,988,989,991,992,994,995,995,996,997,998,999,1001,1003,1005,1007,1008,1009,1010,1010,1011,1012,1014,1015,1016,1018,1019,1021,1022,1024,1025,1027,1028,1030,1031,1034,1036,1037,1039,1041,1044,1046,1048,1050,1052,1053,1055,1056,1058,1060,1061,1062,1063,1065,1067,1069,1071,1074,1075,1076,1077,1079,1080,1082,1082,1084,1086,1087,1090,1091,1093,1094,1096,1100,1102,1105,1106,1108,1111,1113,1115,1117,1118,1120,1122,1123,1124,1125,1127,1129,1131,1133,1134,1136,1139,1141,1146,1151,1152,1154,1155,1160,1162,1165,1166,1169,1170,1172,1173,1175,1176,1178,1181,1184,1187,1189,1191,1193,1196,1201,1204,1205,1208,1209,1213,1216,1218,1220,1222,1225,1226,1228,1231,1232,1234,1238,1241,1244,1248,1250,1254,1256,1260,1262,1265,1268,1272,1275,1278,1280,1282,1285,1290,1295,1296,1299,1301,1304,1306,1310,1312,1314,1319,1321,1325,1328,1333,1337,1342,1349,1355,1360,1363,1367,1374,1377,1380,1384,1386,1390,1393,1400,1404,1408,1414,1417,1420,1423,1430,1432,1437,1441,1444,1450,1452,1459,1463,1465,1473,1475,1480,1483,1487,1491,1496,1502,1505,1508,1511,1517,1520,1524,1526,1532,1535,1539,1544,1549,1552,1556,1560,1565,1572,1576,1580,1585,1590,1599,1604,1607,1612,1616,1620,1627,1633,1640,1644,1651,1656,1661,1666,1675,1680,1684,1689,1693,1698,1701,1706,1712,1717,1720,1727,1733,1735,1740,1747,1753,1757,1759,1768,1774,1780,1786,1789,1793,1798,1802,1805,1807,1809,1812,1815,1818,1821,1827,1832,1837,1841,1844,1849,1854,1859,1863,1868,1873,1876,1880,1889,1894,1904,1907,1912,1920,1925,1930,1937,1940,1943,1946,1952,1958,1962,1966,1971,1974,1977,1979,1984,1989,1996,1999,2007,2012,2018,2021,2027,2033,2040,2045,2055,2059,2065,2069,2071,2075,2080,2085,2089,2098,2102,2109,2115,2119,2122,2128,2131,2137,2141,2150,2154,2161,2163,2169,2176,2182,2187,2192,2197,2200,2205,2209,2218,2222,2226,2229,2234,2240,2249,2255,2256,2261,2265,2273,2276,2284,2288,2290,2295,2299,2307,2310,2317,2325,2329,2334,2339,2346,2351,2356,2365,2377,2382,2388,2393,2404,2413,2421,2427,2435,2441,2448,2457,2461,2471,2483,2487,2494,2506,2514,2520,2525,2530,2538,2549,2560,2568,2574,2582,2590,2596,2605,2608,2614,2625,2628,2636,2643,2650,2655,2666,2680,2688,2695,2709,2726,2736,2744,2749,2755,2764,2771,2779,2794,2808,2817,2825,2831,2841,2852,2859,2867,2876,2887,2893,2902,2908,2915,2926,2935,2941,2951,2960,2964,2971,2983,2997,3004,3016,3020,3030,3035,3044,3050,3054,3065,3070,3081,3085,3091,3100,3107,3111,3116,3126,3132,3136,3147,3158,3161,3174,3183,3192,3197,3203,3210,3218,3230,3231,3242,3256,3274,3286,3299,3307,3321,3330,3339,3354,3370,3391,3419,3440,3460,3479,3509,3530,3568,3601,3629,3652,3697,3718,3747,3819,3899,3985,4058,4134,4239,4402,4768,5631,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal1/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 2
            # left_target_cf = np.array([166,409,444,471,498,509,518,525,532,540,546,552,559,564,570,574,579,582,586,589,592,596,599,602,604,607,610,612,615,617,620,622,625,627,628,630,632,634,635,637,638,639,641,643,645,646,648,649,650,652,653,654,656,657,658,659,661,662,663,664,665,667,668,669,670,672,673,674,675,677,678,680,681,683,684,686,687,688,689,691,693,694,695,696,698,699,701,702,703,705,706,708,709,710,712,713,714,716,718,719,720,722,724,725,727,728,730,731,733,734,735,737,739,740,741,743,745,746,748,749,751,753,754,756,758,759,761,763,764,765,767,768,770,772,774,775,777,779,780,782,784,785,787,789,790,792,793,795,796,797,799,800,802,804,805,807,808,810,811,813,814,816,818,820,822,823,826,829,831,834,836,839,842,844,847,850,853,856,860,864,867,871,875,879,882,888,893,897,901,906,912,918,925,932,939,946,954,962,969,978,991,1004,1015,1027,1040,1052,1073,1085,1099,1113,1128,1143,1161,1180,1199,1213,1232,1252,1270,1289,1313,1334,1355,1379,1403,1428,1452,1476,1497,1524,1545,1569,1602,1631,1657,1688,1716,1743,1776,1807,1850,1892,1929,1971,2007,2038,2075,2116,2154,2186,2222,2254,2288,2325,2368,2416,2460,2497,2552,2598,2654,2707,2774,2868,2991,3111,3323,3594,4055,5196,8000])
            # right_target_cf = np.array([161,391,421,474,508,529,542,553,560,565,570,575,578,581,584,587,590,594,597,599,602,604,606,608,609,612,614,616,618,620,622,624,626,628,630,632,634,636,637,639,642,644,646,648,650,652,654,656,658,660,662,664,665,667,668,670,672,674,676,678,680,682,683,685,687,689,691,692,694,696,697,699,701,702,703,705,707,708,710,711,712,714,716,717,719,720,721,723,724,726,728,729,731,732,734,736,737,739,740,742,744,746,747,749,751,753,755,757,758,760,762,763,765,767,769,771,772,774,776,778,779,781,783,785,787,788,791,793,795,796,798,800,801,803,805,807,809,811,813,815,817,819,821,823,825,827,828,831,833,835,837,839,842,844,846,848,851,853,856,859,861,863,866,869,873,876,879,882,885,889,892,896,900,904,908,912,916,922,926,931,935,943,949,954,961,969,977,985,995,1007,1015,1026,1040,1055,1068,1081,1094,1112,1124,1140,1163,1176,1196,1217,1234,1260,1281,1306,1332,1371,1401,1434,1468,1502,1533,1568,1608,1653,1693,1733,1773,1807,1837,1871,1917,1956,1988,2029,2073,2116,2155,2199,2235,2279,2318,2366,2427,2486,2548,2608,2665,2747,2821,2891,2955,3024,3083,3134,3199,3274,3379,3568,3904,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal2/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 3
            # left_target_cf = np.array([166,487,524,547,568,583,594,604,613,622,629,634,639,645,650,655,659,663,668,672,676,681,686,691,695,700,705,710,714,719,725,730,735,740,745,750,756,762,766,772,778,784,789,795,799,805,810,815,822,830,838,848,859,871,885,901,920,945,972,1011,1053,1106,1160,1219,1284,1358,1441,1523,1614,1714,1817,1957,2077,2209,2323,2479,2639,2882,3453,8000])
            # right_target_cf = np.array([161,487,551,570,582,593,603,609,616,623,630,636,643,650,656,663,668,675,681,687,693,699,704,709,714,719,724,729,735,740,746,752,758,764,770,776,782,788,795,800,807,814,820,827,834,842,849,857,866,877,888,900,914,930,950,974,1005,1046,1089,1140,1206,1277,1376,1486,1607,1740,1859,1989,2130,2268,2436,2633,2884,3092,3331,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal3/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 4
            # left_target_cf = np.array([166,534,580,606,626,639,652,662,672,684,695,706,718,731,743,755,768,783,795,808,821,841,867,902,957,1047,1172,1333,1526,1750,2055,2351,2758,8000])
            # right_target_cf = np.array([161,561,592,611,627,644,660,674,689,703,715,727,740,755,769,784,799,815,830,849,870,898,933,993,1092,1236,1475,1788,2097,2466,3017,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal4/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 5
            # left_target_cf = np.array([166,578,624,650,670,692,713,737,763,789,813,849,916,1078,1362,1784,2375,8000])
            # right_target_cf = np.array([161,590,625,657,686,711,735,763,792,821,856,907,1012,1273,1815,2498,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal5/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 6
            # left_target_cf = np.array([166,612,658,694,733,775,818,906,1232,1971,8000])
            # right_target_cf = np.array([161,618,673,719,766,818,888,1108,1951,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal6/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 7
            # left_target_cf = np.array([166,646,706,775,867,1428,8000])
            # right_target_cf = np.array([161,646,719,792,888,1430,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal7/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            
            #Talairach by 8
            left_target_cf = np.array([166,675,775,1022,8000])
            right_target_cf = np.array([161,686,792,1012,7805])
            short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            filename = target_folder + 'TAL_by_8/sam' + str(sample_id) + '_' + word + '.csv'
            np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            
            # #Talairach by 9
            # left_target_cf = np.array([166,706,867,8000])
            # right_target_cf = np.array([161,719,888,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'bio_1l2m5h_tal9/sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")
            # #Talairach by 10
            # left_target_cf = np.array([166,775,8000])
            # right_target_cf = np.array([161,792,7805])
            # short_spike_matrix = scale_down(spike_matrix=spike_matrix, left_cf=left_cf, right_cf=right_cf, left_target_cf=left_target_cf, right_target_cf=right_target_cf, scaling_factor=scaling_factor)
            # filename = target_folder + 'sam' + str(sample_id) + '_' + word + '.csv'
            # np.savetxt(filename, short_spike_matrix, fmt='%i', delimiter=",")

            #save the spike matrix as a csv file - remember that we need them to be in order sam1 to sam1500 for NeuCube
##            sample_id +=1
##            filename = target_folder + 'sam' +str(sample_id)+ '_' +speaker+ '_' +str(digit)+ '.csv'
##            np.savetxt(filename, spike_matrix, fmt='%i', delimiter=",")

    print "Done."
print "Successfully created", str(sample_id), "samples."
